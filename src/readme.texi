\input texinfo
@titlepage
@title S21 3D Viewer Manual
@end titlepage
This is a manual for simple app to view 3D wireframe models (3D Viewer) in the C++ programming language
Program can operate with .obj files.
Program uses it's own parser for obj files, affine transformations for basic manipulating operations on 3D models (translation, rotation, scaling). QT library is used for UI and opengl for graphics.
More about wirefram models and affine transformations:
Obj file format for representing the definition of 3D objects
Obj file is a geometry definition file format first developed by Wavefront Technologies. The file format is open and accepted by many 3D graphics application vendors.
The .obj file format is a simple data format that represents only three-dimensional geometry, specifically the position of each vertex, the UV of each texture coordinate vertex, vertex normals and the faces that define each polygon as a list of vertices and texture vertices. Obj coordinates have no units, but Obj files can contain scale information in a readable comment line.

Affine transformations
This section will describe basic affine transformations (translation, rotation, scaling) in the plane, using two-dimensional objects (images) as an example. Similarly, affine transformations can also be used for three-dimensional space.
An affine transformation is a mapping in a plane or space onto itself in which parallel lines transforms into parallel lines, intersecting lines into intersecting lines, and skew lines into skew lines.
A transformation in a plane is called affine if it is mutually unambiguous and the image of any line is a line. A transformation (mapping) is called mutually unambiguous (bijective) if it converts different points to different ones, and each point is converted to a point.
In algebraic terms, an affine transformation is a transformation of the form f(x) = M x + v, where M is some invertible matrix and v is some value.
Properties of affine transformations:

A composition of affine transformations is an affine transformation too
The inverse of an affine transformation is an affine transformation too
The ratio of areas is conserved.
The ratio of lengths of line segments is conserved.


Translation
Translation matrix in uniform two-dimensional coordinates

1 0 a 

0 1 b  

0 0 1 

where a and b are the values on x and y by which the source point should be moved. Thus, to move a point, you must multiply the translation matrix by it.

|x1|... |1| |0| |a| ..|x| 

|y1| = |0| |1| |b| * |y|

|1|..... |0| |0| |1| ..|1|

where x and y are the original coordinates of the point and x1 and y1 are the resulting coordinates of the new point after translation.

Rotation
Clockwise rotation matrix in uniform two-dimensional coordinates

cos(a)  sin(a) 0

-sin(a) cos(a) 0

0       0      1

where a is the rotation angle in two-dimensional space. To get the coordinates of the new point it is necessary to multiply the rotation matrix by the original point in the same way as the translation matrix

x1     cos(a)  sin(a) 0     |x|

y1  =  -sin(a) cos(a) 0  *  |y|

1      0       0      1     |1|


Scaling
Scaling matrix in uniform two-dimensional coordinates

a 0 0

0 b 0

0 0 1

where a and b are the scaling factors for the OX and OY axes respectively. Obtaining coordinates of a new point is similar to the cases described above.


This program comes with absolutely no warranty.
Program is written by school21 peers virgilio, stapioca and itchyole 
@bye

